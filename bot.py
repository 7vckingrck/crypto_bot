import os
import time
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("Bot token not found. Please set the BOT_TOKEN environment variable.")

from password_generator import (
    check_rate_limit,
    DEFAULTS,
    generate_multiple_passwords
)

from secure_storage import SecureStorage

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

secure_storage = SecureStorage()


async def save_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
        return

    message_parts = update.message.text.split(' ', 2)
    if len(message_parts) < 3:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /save <—É—á–µ—Ç–Ω–∞—è_–∑–∞–ø–∏—Å—å> <–ø–∞—Ä–æ–ª—å>\n"
            "–ü—Ä–∏–º–µ—Ä: /save example@gmail.com mypassword123"
        )
        return

    try:
        _, account, password = message_parts
        
        if secure_storage.account_exists(user.id, account):
            await update.message.reply_text(
                f"‚ö†Ô∏è –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å '{account}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            )
            return

        secure_storage.save_password(user.id, account, password)
        await update.message.reply_text(f"‚úÖ –£—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å '{account}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"Error in save_password: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.")


async def my_passwords(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
        return

    try:
        passwords = secure_storage.get_passwords(user.id)

        if not passwords:
            await update.message.reply_text("üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
            return

        response = "üîê –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
        for i, acc in enumerate(passwords, 1):
            response += f"{i}. {acc['account']}\n   –ü–∞—Ä–æ–ª—å: `{acc['password']}`\n   –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {acc['date_added']}\n\n"

        await update.message.reply_text(response, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"Error in my_passwords: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –ø–∞—Ä–æ–ª–µ–π.")


LEVELS = [("–ü—Ä–æ—Å—Ç–æ–π üî∞", "simple"), ("–°—Ä–µ–¥–Ω–∏–π ‚öôÔ∏è", "medium"), ("–°–ª–æ–∂–Ω—ã–π üîí", "strong")]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π.\n\n"
        "–Ø –º–æ–≥—É:\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏ —Ä–∞–∑–ª–∏—á–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å –ø–∞—Ä–æ–ª—è–º–∏\n"
        "‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º\n\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
    )
    keyboard = [
        [InlineKeyboardButton(label, callback_data=f"gen:{code}") for label, code in LEVELS],
        [InlineKeyboardButton("üîê –ú–æ–∏ –ø–∞—Ä–æ–ª–∏", callback_data="my_passwords")],
        [InlineKeyboardButton("‚úâÔ∏è –ì—Ä—É–ø–ø–∞ –¢–ì", url="https://t.me/bot_creator161")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:\n\n"
        "üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª–µ–π:\n"
        "/simple [–¥–ª–∏–Ω–∞] - –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å (–±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)\n"
        "/medium [–¥–ª–∏–Ω–∞] - —Å—Ä–µ–¥–Ω–∏–π –ø–∞—Ä–æ–ª—å (–±—É–∫–≤—ã —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –∏ —Ü–∏—Ñ—Ä—ã)\n"
        "/strong [–¥–ª–∏–Ω–∞] - —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã)\n\n"
        "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏:\n"
        "/save <—É—á–µ—Ç–Ω–∞—è_–∑–∞–ø–∏—Å—å> <–ø–∞—Ä–æ–ª—å> - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å\n"
        "/mypasswords - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏\n\n"
        "üßπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n"
        "/clear - –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç (—É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)\n"
        "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/simple 10\n"
        "/medium 16\n"
        "/strong 24\n"
        "/save example@gmail.com mypassword123"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(text, reply_markup=reply_markup)


async def generate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
        return

    cmd = update.message.text.split()[0].lstrip('/')
    if cmd not in DEFAULTS:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return

    level = cmd
    length = DEFAULTS[level]["default"]

    parts = update.message.text.split()
    if len(parts) > 1:
        try:
            length = int(parts[1])
        except ValueError:
            await update.message.reply_text("–î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

    if not (DEFAULTS[level]["min"] <= length <= DEFAULTS[level]["max"]):
        level_names = {"simple": "–ø—Ä–æ—Å—Ç–æ–π", "medium": "—Å—Ä–µ–¥–Ω–∏–π", "strong": "—Å–ª–æ–∂–Ω—ã–π"}
        level_name = level_names.get(level, level)
        await update.message.reply_text(
            f"–î–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è {level_name} —É—Ä–æ–≤–Ω—è: –æ—Ç {DEFAULTS[level]['min']} –¥–æ {DEFAULTS[level]['max']}."
        )
        return

    try:
        passwords = generate_multiple_passwords(level, length, 3)
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data=f"gen:{level}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        pwd_list = "\n".join([f"`{pwd}`" for pwd in passwords])
        msg = f"üîê –í–∞—à–∏ –ø–∞—Ä–æ–ª–∏ ({level}, –¥–ª–∏–Ω–∞ {length}):\n\n{pwd_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        await update.message.reply_text(msg, reply_markup=reply_markup, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"Error in generate_command: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π.")


async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user = query.from_user
    if not check_rate_limit(user.id):
        await query.edit_message_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    data = query.data
    if data.startswith("gen:"):
        try:
            level = data.split(":")[1]
            length = DEFAULTS[level]["default"]
            passwords = generate_multiple_passwords(level, length, 3)
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data=f"gen:{level}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            pwd_list = "\n".join([f"`{pwd}`" for pwd in passwords])
            text = f"üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–∞—Ä–æ–ª–∏ ({level}, –¥–ª–∏–Ω–∞ {length}):\n\n{pwd_list}\n\n–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–ª–∏–Ω—É: /{level} <—á–∏—Å–ª–æ>"
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"Error in gen handler: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π.")
    elif data == "back_to_menu":
        try:
            text = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π.\n\n"
                "–Ø –º–æ–≥—É:\n"
                "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏ —Ä–∞–∑–ª–∏—á–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n"
                "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å –ø–∞—Ä–æ–ª—è–º–∏\n"
                "‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º\n\n"
                "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"
            )
            keyboard = [
                [InlineKeyboardButton(label, callback_data=f"gen:{code}") for label, code in LEVELS],
                [InlineKeyboardButton("üîê –ú–æ–∏ –ø–∞—Ä–æ–ª–∏", callback_data="my_passwords")],
                [InlineKeyboardButton("‚úâÔ∏è –ì—Ä—É–ø–ø–∞ –¢–ì", url="https://t.me/bot_creator161")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error in back_to_menu handler: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é.")
    elif data == "my_passwords":
        try:
            passwords = secure_storage.get_passwords(query.from_user.id)
            
            if not passwords:
                text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                ]
            else:
                text = "üîê –í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
                for i, acc in enumerate(passwords, 1):
                    text += f"{i}. {acc['account']}\n   –ü–∞—Ä–æ–ª—å: `{acc['password']}`\n   –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {acc['date_added']}\n\n"
                
                keyboard = [
                    [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="clear_passwords")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"Error in my_passwords handler: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –ø–∞—Ä–æ–ª–µ–π.")
    elif data == "clear_passwords":
        try:
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear")],
                [InlineKeyboardButton("‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="my_passwords")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏?", reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error in clear_passwords handler: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏.")
    elif data == "confirm_clear":
        try:
            secure_storage.delete_all_passwords(query.from_user.id)
            text = "üóëÔ∏è –í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã."
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Error in confirm_clear handler: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        try:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞.")
        except Exception as e:
            logger.error(f"Error in unknown handler: {e}")


async def clear_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
        return
    
    chat_id = update.effective_message.chat_id
    
    try:
        for message_id in range(update.effective_message.message_id - 1, 
                                update.effective_message.message_id - 11, -1):
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            except Exception:
                continue
        
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=update.effective_message.message_id)
        except Exception:
            pass
        
        temp_msg = await update.message.reply_text("üóëÔ∏è –ß–∞—Ç –æ—á–∏—â–µ–Ω...")
        await context.bot.delete_message(chat_id=chat_id, message_id=temp_msg.message_id)
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞—â–∏—â–µ–Ω—ã –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è.")


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùì –ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é.")


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("simple", generate_command))
    app.add_handler(CommandHandler("medium", generate_command))
    app.add_handler(CommandHandler("strong", generate_command))
    app.add_handler(CommandHandler("save", save_password))
    app.add_handler(CommandHandler("mypasswords", my_passwords))
    app.add_handler(CommandHandler("clear", clear_chat))
    app.add_handler(CallbackQueryHandler(callback_query_handler))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(allowed_updates=["message", "callback_query"])


if __name__ == "__main__":
    main()
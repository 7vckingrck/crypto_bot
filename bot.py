#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Telegram Password Generator Bot
Author: @bot_creator61
Requirements:
  pip install python-telegram-bot==20.5
Usage:
  export BOT_TOKEN="KEY"
  python bot.py
"""

import os
import time
import logging
import string
import secrets
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("Bot token not found. Please set the BOT_TOKEN environment variable.")

RATE_LIMIT_MAX = 15
RATE_LIMIT_WINDOW = 60
_user_requests = {}

DEFAULTS = {
    "simple": {"default": 8, "min": 4, "max": 32},
    "medium": {"default": 12, "min": 6, "max": 64},
    "strong": {"default": 20, "min": 8, "max": 128},
}

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

def check_rate_limit(user_id: int) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞."""
    now = time.time()
    ts_list = _user_requests.get(user_id, [])
    ts_list = [t for t in ts_list if now - t < RATE_LIMIT_WINDOW]
    if len(ts_list) >= RATE_LIMIT_MAX:
        _user_requests[user_id] = ts_list
        return False
    ts_list.append(now)
    _user_requests[user_id] = ts_list
    return True


def make_charset(level: str, exclude_ambiguous: bool = True) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."""
    AMBIG = {'l', 'I', '1', 'O', '0'}
    lower = string.ascii_lowercase
    upper = string.ascii_uppercase
    digits = string.digits
    punct = ''.join(ch for ch in string.punctuation if ch not in {'"', "'", '\\', '`'})

    if exclude_ambiguous:
        lower = ''.join(c for c in lower if c not in AMBIG)
        upper = ''.join(c for c in upper if c not in AMBIG)
        digits = ''.join(c for c in digits if c not in AMBIG)

    if level == "simple":
        return lower + digits
    elif level == "medium":
        return lower + upper + digits
    elif level == "strong":
        return lower + upper + digits + punct
    else:
        raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")


def generate_password(level: str, length: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è."""
    charset = make_charset(level)
    return ''.join(secrets.choice(charset) for _ in range(length))


def generate_multiple_passwords(level: str, length: int, count: int = 3) -> list:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ä–æ–ª–µ–π."""
    return [generate_password(level, length) for _ in range(count)]

LEVELS = [("–ü—Ä–æ—Å—Ç–æ–π üî∞", "simple"), ("–°—Ä–µ–¥–Ω–∏–π ‚öôÔ∏è", "medium"), ("–°–ª–æ–∂–Ω—ã–π üîí", "strong")]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π.\n\n"
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/simple [–¥–ª–∏–Ω–∞]\n"
        "/medium [–¥–ª–∏–Ω–∞]\n"
        "/strong [–¥–ª–∏–Ω–∞]\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ /simple 10\n"
        "‚Ä¢ /medium 16\n"
        "‚Ä¢ /strong 24\n\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª–∏–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è. –°–∏–º–≤–æ–ª—ã –≤—Ä–æ–¥–µ –∫–∞–≤—ã—á–µ–∫ –∏ –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–ª–µ—à–µ–π –∏—Å–∫–ª—é—á–µ–Ω—ã."
    )
    keyboard = [
        [InlineKeyboardButton(label, callback_data=f"gen:{code}") for label, code in LEVELS],
        [InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É", url="https://t.me/bot_creator61")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def generate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ /simple /medium /strong"""
    user = update.effective_user
    if not check_rate_limit(user.id):
        await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
        return

    cmd = update.message.text.split()[0].lstrip('/')
    if cmd not in DEFAULTS:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return

    level = cmd
    length = DEFAULTS[level]["default"]

    parts = update.message.text.split()
    if len(parts) > 1:
        try:
            length = int(parts[1])
        except ValueError:
            await update.message.reply_text("–î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    if not (DEFAULTS[level]["min"] <= length <= DEFAULTS[level]["max"]):
        level_names = {"simple": "–ø—Ä–æ—Å—Ç–æ–π", "medium": "—Å—Ä–µ–¥–Ω–∏–π", "strong": "—Å–ª–æ–∂–Ω—ã–π"}
        level_name = level_names.get(level, level)
        await update.message.reply_text(
            f"–î–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è {level_name} —É—Ä–æ–≤–Ω—è: –æ—Ç {DEFAULTS[level]['min']} –¥–æ {DEFAULTS[level]['max']}."
        )
        return

    passwords = generate_multiple_passwords(level, length, 3)

    keyboard = [
        [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data=f"gen:{level}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    pwd_list = "\n".join([f"`{pwd}`" for pwd in passwords])
    msg = f"üîê –í–∞—à–∏ –ø–∞—Ä–æ–ª–∏ ({level}, –¥–ª–∏–Ω–∞ {length}):\n\n{pwd_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await update.message.reply_text(msg, reply_markup=reply_markup)


async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    query = update.callback_query
    await query.answer()

    user = query.from_user
    if not check_rate_limit(user.id):
        await query.edit_message_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    data = query.data
    if data.startswith("gen:"):
        level = data.split(":")[1]
        length = DEFAULTS[level]["default"]
        passwords = generate_multiple_passwords(level, length, 3)

        keyboard = [
            [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data=f"gen:{level}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        pwd_list = "\n".join([f"`{pwd}`" for pwd in passwords])
        text = (
            f"üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–∞—Ä–æ–ª–∏ ({level}, –¥–ª–∏–Ω–∞ {length}):\n\n{pwd_list}\n\n"
            f"–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–ª–∏–Ω—É: /{level} <—á–∏—Å–ª–æ>"
        )
        await query.edit_message_text(text, parse_mode="Markdown", reply_markup=reply_markup)
    elif data == "back_to_menu":
        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π.\n\n"
            "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "/simple [–¥–ª–∏–Ω–∞]\n"
            "/medium [–¥–ª–∏–Ω–∞]\n"
            "/strong [–¥–ª–∏–Ω–∞]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /simple 10\n"
            "‚Ä¢ /medium 16\n"
            "‚Ä¢ /strong 24\n\n"
            "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª–∏–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è. –°–∏–º–≤–æ–ª—ã –≤—Ä–æ–¥–µ –∫–∞–≤—ã—á–µ–∫ –∏ –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–ª–µ—à–µ–π –∏—Å–∫–ª—é—á–µ–Ω—ã."
        )
        keyboard = [
            [InlineKeyboardButton(label, callback_data=f"gen:{code}") for label, code in LEVELS],
            [InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É", url="https://t.me/bot_creator61")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup)
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞.")


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùì –ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("simple", generate_command))
    app.add_handler(CommandHandler("medium", generate_command))
    app.add_handler(CommandHandler("strong", generate_command))
    app.add_handler(CallbackQueryHandler(callback_query_handler))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling(allowed_updates=["message", "callback_query"])


if __name__ == "__main__":
    main()
